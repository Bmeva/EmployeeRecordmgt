Python
vs code
gitbase

npm list


mine
Nedva@54

Install Node js -- https://nodejs.org/en/
create a virtual environment by typing python -m venv env

Activate your virutal environment
source env/Scripts/activate

install django with pip install django

install npm -- npm install -g npm

to check the version of nmp type npm -v
check the version of python with python --version

Check the version of django - python -m django --version

get detailed information about the version of django installed on your virtual environment
pip show django

Install django rest framwork with - pip install djangorestframework

start a project with - django-admin startproject .

Start the development server and confirm if django was successfully installed
python manage.py runserver
then open your web browser and input this ip address http://127.0.0.1:8000

ctrl + C to stop the development server

open your application folder on vs code by typing code .

Create an app with python manage.py startapp API

Migrate your changes with - python manage.py makemigrations
Next type python manage.py migrate

Start development server with - python manage.py runserver

EVANSBOMA@GMAIL.COM

lesson two
creating react front end

delete the Front end folder that was created
npx create-react-app frontendapp which would create a new folder called frontend app inside our project
it would install the neccesary packages such as react-dom, reat, react-script etc
when you open the folder the first one is node_modules which contains all packages that comes
with a react app
 next is the public folder which comes with all out static files
 you would see images, index.html and icon file

 the src file is where we would develop out application
 at the bottom you would see other files such as gitignore and json files


 to run our front end server cd into the folder

 cd frontendapp
 cd .. would take you out of the folder
 then npm start

 if it gives you a prompt to allow click on it

 it would open through http://localhost:3000


to change the wrte up on the home page 
 go to src and open app.js file

 in the edit write up delete it and add yours

 to change everything go to your app.js file to the below

 
function App() {
  return (
    <div className="App">
      <div>Hello react</div>
    </div>
  );
}

export default App;


next create a folder called components inside the src folder

now we need to create a communication between the front end and backend
bcos as you see django runs on port 8000 and react on 3000. they are completly decoupled

open a new terminal 
pip install django-cors-headers

if it dont install on vs code use gitbash

next add it to installed app section

  "corsheaders",

  add this to the middleware section and it has to be the first
   "corsheaders.middleware.CorsMiddleware",


   add this. the url is the react server url

   CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000'
]

now front end and backend should be able to communicate

LESSON THREE

now we need to install a package called react router dom which would enable us navigate 
various pages 

cd into the frontend app
type npm i react-router-dom

to use react router go to 
 index.js

At the top import 
import {BrowserRouter as Router} from 'react-router-dom';

next wrap the entire code in a router

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Router>
    <React.StrictMode>
      <App />
    </React.StrictMode>
  </Router>
);

next we would create a number of files in our component folder


type this on the Home.js

import React from "react";
const Home =() => {
    return (
        <div>Home</div>
    )
}

export default Home

create another page in the component folder and call it About.js and add the following code 

import React from "react";
const About = () => {
    return (
        <div>About</div>
    )
}

export default About



Create another page and call it Create.js this is the page where we would create some employee records

and add the following code 


now we would write some logic that would display the different pages that we have created.

we would write it in the app.js file and th app.js file acts like our urls.py file in django

import all the pages first 

import About from './components/About';
import Create from './components/Create';
import Home from './components/home';
import Landing from './components/Landing';

remove the 
<div>Hello react</div>

and add the following 

 <Routes>
        <Route path='' element={<Home />} />
        <Route path='/about' element={<About />} />
        <Route path='/landing' element={<Landing />} />
        <Route path='/create' element={<Create />} />



      </Routes>


cd into the frontendapp and run npm start. if it dont start and gives error type

 npm audit fix --force

 then run npm start which would land you on the home page
 type /about
 type /landing

 type /create

 which would take you to the different pages


 Lesson four - Material UI navbar

 material UI allows us to use pre built components in our react js application
 1. install material Ui at https://mui.com/material-ui/
 Stop your server and paste the code npm install @mui/material @emotion/react @emotion/styled

 which installs material UI and also emotion react which is used to write 
 javascript and css codes

 now we need to install material UI icon libraries just as we have font awesome
 icons

 if you scroll down the installation sectiion you would see the code where to
  install the library for icons. copy and install npm install @mui/icons-material

  npm install @mui/icons-material
  
  ADDING NAVBAR
  go back to the material ui library and click on get started
  Click on components, go to the navigation section and click on drawer
  scroll to the clipped under the Persistent drawer 

  copy the code and pase inside navbar.js

delete the typograpgy

remove the divider with the list at the bottom of the divider
<List>
                        {['All mail', 'Trash', 'Spam'].map((text, index) => (
                            <ListItem key={text} disablePadding>
                                <ListItemButton>
                                    <ListItemIcon>
                                        {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}
                                    </ListItemIcon>
                                    <ListItemText primary={text} />
                                </ListItemButton>
                            </ListItem>
                        ))}
                    </List>

  delete this  {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (

    and this   ))}   it loops over the function but delete it so we hard code ours
    delete this icon as well 
    {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}

    and this as well key={text} disablePadding

    in here type "Home"

    <ListItemText primary={"text"} />

     <ListItemText primary={"Home"} />

     go back to material UI library and search for home icon

     https://mui.com/material-ui/material-icons/  

     copy the code and import the icon library at the top

     import HomeWorkIcon from '@mui/icons-material/HomeWork';

     type  <HomeWorkIcon/> inbetween the ListItemIcon

       
                            <ListItem>
                                <ListItemButton>

                                    <ListItemIcon>
                                        <HomeWorkIcon/>
                                    </ListItemIcon>
                                    <ListItemText primary={"Home"} />
                                </ListItemButton>
                            </ListItem>
                      
                    </List>


next we need to add a link so go to the top section and import

import { Link, useLocation} from 'react-router-dom';

below the export default function add 

  const location = useLocation()
    const path = location.pathname

in the list item button add   <ListItemButton component = {Link} to ="/" selected = {"/" === path}>


now copy the list item code for the create and about us pages 

<ListItem>
                                <ListItemButton component = {Link} to ="" selected = {"" === path}>

                                    <ListItemIcon>
                                        <HomeWorkIcon/>
                                    </ListItemIcon>
                                    <ListItemText primary={"Home"} />
                                </ListItemButton>
                            </ListItem>

delete the imports that you dont use which are greyed out


add disablePadding to the list items

you can change the name of the export default function to Navi if you want

Next go to app.js and import the navbar

import Navi from './components/navbar';  component names must start with capital letters

on your app.js under the   <div className="App">

<Navi/>



Now we want all the navbar pages to be within the navbar so 
above the export default function in your app.js add this

interface NaviProps {
    children: React.ReactNode;
}

comment out export default function Navi() { 

  and add 
  export default function Navi({ children }: NaviProps) {


go to the bottom of the navbar.tst where you have  <DrawerHeader />


and below it add

      {children}

      Now go to the app.js and add 
       <Navi />


      </Navi>
within the <Navi> tags add the urls

 <Navi>

      <Routes>

        <Route path="" element={<Home />} />


        <Route path="/aboutpage" element={<About />} />

        <Route path="/Createrecord" element={<Create />} />

        <Route path="/Services" element={<Services />} />


      </Routes>
    </Navi>



git remote -v to check the git repo on your project
git status
git  --version
to ignore a file create a file called .gitignore
then type the name of the file inside it


make sure you are nit in your frontendapp

Lesson 5.
Creating the models
go to api folder and create a model

Class names should follow PascalCasing
talk about caMel case and PascalCase
field names should follow snake_casing

create the model
migrate the changes and explan the migration system
check on the admin panel then add the admin.py files

Create super user so you can log in to your admin panel

pyhton manage.py createsuperuser
email: evansboma@gmail.com
eva
Nedva@54

https://www.django-rest-framework.org/api-guide/viewsets/

we can use one viewsets to do create, retireve, partial update update, destroy, list

go to views.py in your api app and write the codes


Vieset apparoach

With the approach I described, you don't necessarily need to use the EmpAPIviewset for rendering HTML templates or handling form submissions via the traditional Django views. This approach leverages Django's standard views and forms to handle web requests.

When to Use EmpAPIviewset
The EmpAPIviewset is part of Django REST Framework (DRF) and is useful when you need to provide API endpoints that can be consumed by client applications (such as mobile apps or JavaScript frontends). It is particularly useful for:

Providing RESTful API endpoints: If you have client-side applications that need to interact with your backend, the ViewSet is ideal for CRUD operations via an API.
AJAX requests: If you want to make asynchronous requests from the frontend, such as loading or submitting data without refreshing the page, you can use your API endpoints.
Using Both Together
You can use both traditional Django views and DRF viewsets in your project. Here's how you can integrate both approaches:

Traditional Django Views: For server-rendered HTML templates and form handling, use Django views and forms as described earlier.

DRF ViewSets: Keep the EmpAPIviewset to provide an API for client applications or for use with AJAX requests in your templates.


LESSON 6.

We would combine mater-ial ui forms with use react hook forms to submit our forms to the back end
install react hook forms (this is the website: https://react-hook-form.com/)
cd into your frontendapp and type 
npm install react-hook-form 
you also need install npm install @mui/material @emotion/react @emotion/styled 

but we have alreeady installed it in previous lectures when we created our navbar
we also need to install date and time picker from material ui 

You can find it if you go to https://mui.com/material-ui/ and click on search 
then type date and time picker

npm install @mui/x-date-pickers  took this out  ---

to make the date time picker work you also need to install the date library

npm install dayjs    took out this


Now we need to create the forms
Go to component folder and create a new folder called forms
we would create the forms for our EmployeeDetails model


after creating react app if you install something and your app stops working you 
can delete node_modules and package.lock.json file and then do 
npm install again


once you declare css in any component it works accross other components

to use datetime picker install  npm 

npm install react-datepicker
and npm install dayjs



then add the below to the component where you want to use it

import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css"; // Import the CSS for the date picker



to add font awesome icon install
npm install @fortawesome/react-fontawesome @fortawesome/free-solid-svg-icons

import 
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';
to get font awesome icons go to
https://fontawesome.com/search then search for the icon
then select react
then select global import or individual import



for the edit i used material ui library 
https://mui.com/material-ui/material-icons/?query=edit


install axios using  npm install axios. i used it for the register user 


for the login you have to add 'rest_framework.authtoken', to the installed apps
and then run migrations

to display pop up message just use
 alert('Logout successful');

 else advanced methord would be to install
 npm install react-toastify

 then import 
 import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
